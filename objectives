Objectives
1.1:
	Create a simple program (clock_gettime) that repeatedly calls the clock_gettime syscall and stores the measured values in memory and prints them to stdout
	input:
		program argurments:
			number of repetitions (no_reps)
	output:
		print to stdout the list of timestamps (sample)

1.2:
	Create a timespec utility (ts_util.h ts_util.c) and a test program for the utility (ts_test)
	define type ts_t
	functions:
		bool ts_is_equal(ts_t *t1, ts_t *t2): t1 == t2?
		bool ts_is_less(ts_t *t1, ts_t *t2): t1 < t2?
		ts_t ts_sub(ts_t *t1, ts_t *t2): t1 -t2
		ts_to_l(ts_t *t): convert to long
		ts_printf(ts_t *t): print sec and nsec part of t

1.3:
	Create a script (set_cpus_performance.sh) to switch between performance and powersave scaling governors, if relevant.
	input:
		script argument:
			scaling governor: performance or powersave


2.1:
	Create a benchmark utility (bm_util.h bm_util.c), a test program for the utility (bm_test) and an R script (bm_test.R) to confirm test statistics
	Builds on objective:
		1.2
	functions:
		timestamps_to_intervals(ts_t *ti, ts_t *tf, long *dt, int size)
		compute_mean(long *dt, int size)
		compute_std(long *dt, int size)
		save_intervals(long *dt, int size)
		save_statistics(double mean, double std)


3.1:
	Expand clock_gettime to compute and save intervals and statistics using bm_util.c
	Builds on objectives:
		1.1 and 2.1
	output:
		intervals statistics (statistics)

3.2:
	Create a R script (R_histogram.R) that plots a histogram of the data (smaller than mean + 5 * std)
	Builds on objective:
		3.1

4.1:
	Create a bash script (lttng.sh) that creates a lttng session, runs clock_gettime, saves the trace to "traces/" and destroys the session.
	Builds on objectives:
		3.1
	input:
		script arguments:
			sample size

4.2:
	Create a bash script (system_tap.sh) that prints a system tap script file and runs system tap on clock_gettime
	Builds on objectives:
		3.1
	input:
		script arguments:
			sample size
	ouput
		script output:
			systemp tap script (clock_gettime.stp)

4.3:
	Create a bash script (perf.sh) that runs perf on clock_gettime
	Builds on objectivs:
		3.1
	input:
		script arguments:
			sample size
	output:
		script output:
			stdout redirected to clock_gettime.out
			perf record data (perf.data/perf.data.old)

4.4:
	Create a bash script (ftrace.sh) that runs ftrace (trace-cmd) on clock_gettime
	Builds on objectives:
		3.1
	input:
		script arguments:
			sample size
	output:
		script output:
			stdout redirected to clock_gettime.out
			trace record data (trace.dat)

4.5:
	Create a bash script (lttng-snapshot.sh) that creates a lttng session in snapshot mode, runs clock_gettime and destroys the session.
	Builds on objectives:
		3.1
	input:
		script arguments:
			sample size

4.6:
	Multithread clock_gettime using pthreads. Change clock_gettime argument from no_reps to sample_size (= no_reps - 1)
	Builds on objectives:
		3.1
	input arguments:
		program arguments:
			sample_size
			no_threads
			
4.7:
	Create a bash script that runs clock_gettime with no tracing.
	Builds on objectives:
		3.1
	input arguments:
		program arguments:
			sample size

5.1:
	Expand lttng.sh to do parameter exploration of num-subbuf and subbuf-size. Input arguments range are read form file (lttng.param), including sample_size.
	Builds on objectives:
		4.1
	input:
		script arguments:
			file containing range of parameters (lttng.param)
	output:
		script output:
			file containing a csv table of parameters and statistics (clock_gettime_lttng.csv)

5.2:
	Expand lttng-snapshot.sh (renamed lttng_snapshot.sh) to do parameter exploration of num-subbuf and subbuf-size, in snapshot mode. Input arguments range are read form file (lttng_snapshot.param), including sample_size.
	Builds on objectives:
		4.5
	input:
		script arguments:
			file containing range of parameters (lttng_snapshot.param)
	output:
		script output:
			file containing a csv table of parameters and statistics (clock_gettime_lttng_snapshot.csv)

5.3:
	Expand system_tap.sh to explore various probe contents.
	Builds on objectives:
		4.2
	ouput:
		script output
			file containing a csv table of parameters and statistics (clock_gettime_system_tap.csv)

5.4:
	Expand clock_gettime_pthread to pin each thread on a cpu (pthread_setaffinity_np) and wait for all threads to be ready before starting the benchmark (phtread_barrier_wait).
	Builds on objectives:
		4.6


6.1:
	Expand lttng.sh to explore the parameter "number of threads" of clock_gettime_pthread. Also, add exploration of lttng parameters: output (mmap/splice) and overflow (discard/overwrite).
	Builds on objectives:
		5.1 and 5.4
	intput:
		script argument:
			add no_thread, output and overflow to lttng.param

6.2:
	Expand lttng_snapshot.sh to explore the parameter "number of threads" of clock_gettime_pthread.
	Builds on objectives:
		5.2 and 5.4
	intput:
		script argument:
			add no_thread to lttng_snapshot.param

6.3:
	Expand system_tap.sh to explore the parameter "number of threads" of clock_gettime_pthread. Input arguments are read through a file instead.
	Builds on objectives:
		5.3 and 5.4
	input:
		script arguments:
			read from file: no_thread, sample_size (system_tap.param)

6.4:
	Expand perf.sh to explore the parameter "number of threads" of clock_gettime_pthread. Input arguments are read through a file instead.
	Builds on objectives:
		4.3 and 5.4
	input:
		script arguments:
			read from file: no_thread, sample_size (system_tap.param)

6.5:
	Expand ftrace.sh to explore the parameter "number of threads" of clock_gettime_pthread. Input arguments are read through a file instead.
	Builds on objectives:
		4.4 and 5.4
	input:
		script arguments:
			read from file: no_thread, sample_size (system_tap.param)

6.6:
	Expand clock_gettime_pthread to add getuid system call (getuid_pthread.c)
	Builds on objectives:
		5.4

6.7:
	Expand calibration.sh to explore the parameter "number of threads" of clock_gettime_pthread. Input arguments are read through a file instead.
	Builds on objectives:
		4.7 and 5.4
	input:
		script arguments:
			read from file: no_thread, sample_size (calibration.param)

7.1:
	Expand lttng.sh to count the number of lost events and record it in the .csv file. Add a "clean" function to rm output files between each run.
	Builds on objectives:
		6.1
	output:
		script output:
			add no_lost_events to the .csv file

7.2:
	WARNING: When overloaded, system_tap output to file seems buggy, resulting in a negative number of lost events
	Expand system_tap.sh to count the number of lost events and record it in the .csv file. Add a "clean" function to rm output files between each run.
	Builds on objectives:
		6.3
	output:
		script output:
			add no_lost_events to the .csv file

7.3:
	Expand perf.sh to count the number of lost events and record it in the .csv file. Add a clean function to rm output files between each run.
	Builds on objectives:
		6.4
	output:
		add no_lost_events to the .csv file

7.4:
	WARNING: counting lost events is very slow! (slower than clock_gettime)
	Expand ftrace.sh to count the number of lost events and record it in the .csv file. Add a clean function to rm output files between each run.
	Builds on objectives:
		6.5
	output:
		add no_lost_events to the .csv file

7.5:
	In octosquare, cores 2*i and 2*i+1 share resources. Modify getuid_pthread to pin threads in the relevant order: 0, 2, 4, ..., 62, 1, 3, 5, ..., 63
	Builds on objectives: 
		6.6

7.6:
	Expand getuid_pthread to change cpu affinities randomly every 8192 = 2^13 trials, defined as BURST_SIZE. 
	Builds on objectives:
		6.6

8.1:
	Integrate tracing benchmarks in a self-contained directory.
	Builds on objectives:
		1.3, 6.2, 6.6-6.7, 7.1-7.4,
	input:
		script input:
			put all parameters in a single file (param)
	output:
		script ouput:
			all results are saved in .csv format in the results directory

8.2:
	Run an experiment with clock_gettime_pthread to see the effect of the number and size of buffers on the number of lost events.
	Builds on objectives:
		7.1

8.3:
	Change lttng.sh to run getuid_pthread instead and add the set_cpus_perfomance script.
	Builds on objectives:
		7.1, 7.6

9.1:
	Use objective 8.1 to generate results on octosquare to extract scaling as the number of threads increases. Create R scripts to plot the data.
	Build on objective:
		8.1
	input:
		script input:
			param

9.2:
	Same as 8.1 but replace executing program with the new version of 7.5
	Builds on objective:
		7.5, 8.1

9.3:
	Same as 8.1 but replace executing program with the new version of 7.6. Add -n option to cmd in scripts.
	Builds on objective:
		7.6, 8.1

10.1:
	Same as 9.1, but densify samples for perf and ftrace: 1 2 4x ... 64
	Builds on objective:
		9.1

10.2:
	Expand plot_data.R to plot the mean times, overheads and relative overheads. Rerun experiment with bigger sample size.
	Builds on objective:
		9.1

11.1:
	Same as 10.2, but with the getuid_pthread.c adapted to octosquare from 7.5. Densify samples as in 10.1.
	Builds on objectives:
		7.5, 10.1-10.2

11.2:
	Same as 10.2, but with the getuid_pthread.c adapted to octosquare from 7.6.
	Builds on objectives:
		7.6, 10.1-10.2
	
